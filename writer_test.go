package cbzip2

import (
	"bytes"
	"compress/bzip2"
	"crypto/rand"
	"io"
	"reflect"
	"testing"
)

func TestBasicCompress(t *testing.T) {
	tt := []struct {
		msg  string
		data []byte
		want []byte
	}{
		{
			msg:  "1024 byte write",
			data: []byte{0xe9, 0x30, 0xb4, 0xce, 0xb4, 0x43, 0xcf, 0x73, 0x23, 0xae, 0xff, 0x9, 0xdb, 0x14, 0x71, 0x47, 0xb8, 0x8b, 0xa8, 0xdb, 0xae, 0xf3, 0xa, 0x1f, 0xa1, 0x49, 0xba, 0x47, 0x43, 0xa, 0x23, 0xfa, 0x90, 0x54, 0xf2, 0xe2, 0x4, 0x77, 0xb5, 0x70, 0x93, 0x8d, 0xa2, 0x25, 0xfd, 0xe1, 0x9c, 0x20, 0x5b, 0xf8, 0x5d, 0xc8, 0x21, 0x6d, 0x16, 0xe5, 0x19, 0x76, 0x35, 0x1b, 0xeb, 0x7d, 0xd6, 0xa, 0x49, 0xd2, 0xe6, 0x12, 0xc6, 0x2e, 0xc9, 0x17, 0x32, 0x15, 0x1f, 0x77, 0x95, 0x9b, 0x5f, 0x98, 0x2f, 0xc, 0x42, 0xef, 0x4, 0x70, 0x9, 0xf7, 0xc1, 0x62, 0x99, 0x94, 0x90, 0x98, 0x79, 0x9d, 0x64, 0x62, 0xdf, 0x8a, 0x70, 0x4, 0x6e, 0x60, 0x30, 0x55, 0x76, 0xa, 0x62, 0x5e, 0xe8, 0x91, 0x3b, 0xa5, 0xe6, 0xcc, 0xdf, 0xee, 0x95, 0xa6, 0x9c, 0x25, 0xe6, 0xc7, 0x25, 0x7c, 0x70, 0xb6, 0xc4, 0x42, 0x78, 0x25, 0xbd, 0xd5, 0xcd, 0xb0, 0xd6, 0xaa, 0x6f, 0x83, 0xf6, 0xd2, 0x60, 0x80, 0x6b, 0xd2, 0x54, 0xb9, 0x63, 0x84, 0xf2, 0xe6, 0x84, 0xc7, 0xfc, 0xa3, 0xce, 0xc7, 0x26, 0xa6, 0xeb, 0xca, 0x63, 0xf, 0xa7, 0xdb, 0x20, 0x88, 0x6e, 0xc, 0xb1, 0x7b, 0x34, 0x32, 0x7f, 0x92, 0x7f, 0xc3, 0xb3, 0x9c, 0x9f, 0x3, 0xb0, 0x2c, 0x13, 0xa3, 0x80, 0xff, 0xbe, 0x8, 0x53, 0xdb, 0x6, 0x63, 0x26, 0x68, 0x6c, 0xfd, 0x8c, 0x86, 0xe9, 0xe4, 0x63, 0x2b, 0x1f, 0xe0, 0xc9, 0xcc, 0x76, 0x1, 0xc8, 0xcb, 0x0, 0x2c, 0x6, 0xe0, 0x3e, 0xd0, 0x26, 0xdb, 0xdf, 0xcc, 0xe, 0xde, 0xfc, 0x6a, 0x44, 0x8a, 0x8d, 0x38, 0xfa, 0xa0, 0x3f, 0x9b, 0xf4, 0x5e, 0xac, 0xb8, 0x71, 0x1b, 0x67, 0xc9, 0x1f, 0x6d, 0x68, 0x2, 0xeb, 0xd4, 0x1f, 0x5e, 0xbe, 0xa5, 0x14, 0xa6, 0xea, 0x6f, 0xf5, 0x36, 0xe1, 0x58, 0x7b, 0xfe, 0x31, 0x28, 0xaa, 0xa7, 0xd, 0xd6, 0x41, 0xd8, 0x39, 0xc, 0x1c, 0xc1, 0xa8, 0x94, 0x3a, 0x3e, 0x3d, 0x9d, 0x84, 0x78, 0x9, 0xb6, 0x5b, 0xc3, 0x7, 0xe8, 0x2c, 0x97, 0xb8, 0x78, 0x96, 0xcc, 0xaf, 0xbc, 0x3, 0x7f, 0xbd, 0xd2, 0xb5, 0xda, 0xfe, 0xeb, 0xe9, 0xcd, 0xca, 0x5e, 0xae, 0xe8, 0xd0, 0xa2, 0x27, 0x26, 0x66, 0x92, 0x77, 0x1b, 0x18, 0xa3, 0xab, 0x26, 0x38, 0xd5, 0xc5, 0x7a, 0x75, 0x8b, 0x5a, 0xcc, 0x3b, 0xd7, 0xdd, 0x5d, 0x7d, 0xf0, 0x96, 0xc7, 0xa1, 0x4, 0x28, 0x65, 0x7b, 0x4c, 0xb7, 0xa5, 0x65, 0x33, 0x3, 0x40, 0x66, 0xcc, 0x3e, 0xe0, 0x12, 0x7b, 0xfe, 0xb5, 0xf4, 0x8d, 0xe0, 0xf, 0x9b, 0xfb, 0x65, 0x9d, 0x86, 0x93, 0xf7, 0x52, 0x80, 0x2d, 0x8b, 0x7f, 0x1, 0xd5, 0xf0, 0xb1, 0x8d, 0x78, 0x47, 0xfe, 0xa3, 0x8e, 0x9e, 0x27, 0xa8, 0xfe, 0xf, 0x1e, 0x95, 0x9e, 0x7a, 0xe, 0x3c, 0x5f, 0x64, 0x5b, 0x9a, 0x9c, 0xce, 0x9, 0xff, 0x9b, 0xb1, 0x21, 0x0, 0x51, 0x26, 0x69, 0x23, 0x8a, 0xec, 0x74, 0xd7, 0x68, 0xb9, 0x95, 0x8e, 0x1f, 0x17, 0x8e, 0x13, 0xea, 0xb9, 0x5, 0x6, 0x65, 0xe6, 0x4e, 0x94, 0x5e, 0x26, 0x8b, 0xe6, 0x59, 0x15, 0x25, 0x11, 0xbb, 0x18, 0xff, 0x74, 0x1e, 0xc2, 0x22, 0x1c, 0x9f, 0x31, 0x9, 0x3a, 0xec, 0xe2, 0xf1, 0x96, 0x4, 0xfb, 0x4a, 0xc6, 0xa6, 0x30, 0xc5, 0x5e, 0x4a, 0xde, 0x33, 0x1e, 0xf0, 0x55, 0x84, 0x8, 0x33, 0x7b, 0xc9, 0x82, 0x94, 0x2d, 0xae, 0x4c, 0xd0, 0x31, 0xd8, 0x8a, 0xcf, 0xc6, 0x36, 0x7a, 0xf7, 0xfd, 0x2, 0x91, 0xbe, 0x2f, 0xe6, 0x1c, 0x44, 0xc0, 0x5b, 0x9a, 0x1a, 0x4c, 0xdc, 0x4e, 0x4f, 0xd3, 0xd5, 0xda, 0x84, 0x3a, 0x26, 0x53, 0x10, 0x21, 0xe5, 0x25, 0x8d, 0x72, 0xe0, 0xe5, 0xe9, 0x4e, 0x49, 0x1, 0x69, 0xd9, 0xd6, 0x4c, 0x8e, 0x98, 0xc2, 0x7c, 0x93, 0x61, 0x8, 0xad, 0x91, 0xf4, 0xd0, 0x40, 0xcb, 0x90, 0xff, 0xaa, 0x65, 0x33, 0x47, 0x1c, 0x49, 0x52, 0x3c, 0xfb, 0x32, 0x57, 0x60, 0xf6, 0x2a, 0x74, 0x91, 0x79, 0x12, 0x53, 0xb, 0x76, 0xfb, 0x69, 0x75, 0xfb, 0x14, 0xc5, 0x77, 0xda, 0xfa, 0xf0, 0x2f, 0x39, 0x71, 0x69, 0x87, 0x67, 0xb1, 0xbc, 0x92, 0x74, 0x64, 0x24, 0xc9, 0x64, 0xb, 0xc1, 0x80, 0x56, 0xb7, 0x2, 0xf0, 0x87, 0x36, 0xd9, 0xdb, 0x56, 0xd2, 0xb6, 0x68, 0xb2, 0xa2, 0x5, 0xea, 0x41, 0x27, 0x10, 0x81, 0x73, 0x32, 0x70, 0x59, 0x55, 0x6a, 0x2c, 0x95, 0x53, 0xe5, 0x77, 0x76, 0x10, 0x1c, 0x3, 0x3d, 0x14, 0x1f, 0xe8, 0x8f, 0x6e, 0x6b, 0xf0, 0x3, 0x54, 0x8b, 0x66, 0x21, 0xdd, 0x6c, 0x82, 0x9, 0x88, 0xfc, 0x33, 0x4f, 0x4b, 0x9f, 0xd4, 0xe9, 0xc7, 0xe5, 0x3a, 0xc8, 0x6, 0x38, 0x2f, 0x9b, 0x9e, 0x48, 0x55, 0xba, 0xf8, 0x5, 0xad, 0x95, 0x3b, 0xd2, 0x85, 0x25, 0xf1, 0x34, 0xc9, 0xf9, 0xb1, 0xd1, 0xc8, 0x47, 0x62, 0x30, 0xd0, 0xcc, 0xbd, 0xce, 0xa, 0xd5, 0xee, 0x36, 0xaa, 0x4f, 0xcd, 0x60, 0xbb, 0xb9, 0xc9, 0xbe, 0x68, 0x69, 0xcf, 0x90, 0x14, 0x2, 0x4f, 0x56, 0xf5, 0x44, 0x10, 0x64, 0x44, 0xf7, 0x98, 0x66, 0x9b, 0x30, 0xfd, 0xc1, 0xe6, 0x86, 0x52, 0x9e, 0x84, 0xc1, 0x9f, 0xe6, 0x9f, 0x71, 0x6a, 0xef, 0x33, 0xb9, 0xae, 0x14, 0x9, 0x3, 0x34, 0xf1, 0x80, 0x9c, 0x74, 0xfb, 0x71, 0x1b, 0xc6, 0x34, 0x79, 0xef, 0xff, 0x89, 0x9, 0xae, 0xe9, 0x79, 0x31, 0xd0, 0x78, 0x23, 0x5b, 0x94, 0x58, 0x1a, 0xad, 0xf, 0x93, 0x43, 0xa4, 0x5b, 0xd3, 0xdd, 0x81, 0xc8, 0x10, 0x77, 0x9b, 0xdc, 0x9a, 0xa7, 0x19, 0xb3, 0xfe, 0x17, 0x31, 0x64, 0x4f, 0x50, 0x42, 0x17, 0x7e, 0xb9, 0xc8, 0x59, 0x99, 0x3d, 0x5a, 0xad, 0xf9, 0x3d, 0xd6, 0xfc, 0xbe, 0x39, 0xb5, 0x7b, 0x14, 0x4e, 0xec, 0x77, 0xb, 0x50, 0x5d, 0x10, 0xe5, 0x64, 0x1d, 0xa2, 0xb1, 0xd5, 0xb9, 0x8c, 0x1b, 0x2f, 0xd2, 0xc1, 0xcc, 0xdf, 0xff, 0x51, 0x21, 0xa2, 0xa0, 0xa3, 0x1f, 0x52, 0x47, 0x11, 0x7, 0x89, 0xf3, 0xae, 0x14, 0xfe, 0x1c, 0xc1, 0x90, 0x56, 0xf0, 0x0, 0x77, 0xc9, 0x4, 0x12, 0xf, 0x66, 0xe7, 0x82, 0x91, 0x3, 0x3e, 0x4f, 0x48, 0xbb, 0x3e, 0x72, 0x74, 0x28, 0x96, 0xd, 0x46, 0xfc, 0x95, 0x54, 0x10, 0x39, 0x50, 0x1, 0xdd, 0x6b, 0x40, 0xd7, 0x72, 0x2e, 0x53, 0x8a, 0x82, 0x1, 0x63, 0x75, 0x8e, 0xb1, 0x49, 0xb6, 0x29, 0x3, 0xca, 0x26, 0x8b, 0xcc, 0xec, 0xd5, 0x6b, 0x25, 0x7a, 0xe, 0x46, 0x41, 0x74, 0x4e, 0xf9, 0xc9, 0x6d, 0xa6, 0x38, 0x74, 0x8c, 0x49, 0xaa, 0x25, 0x7e, 0xbb, 0xb9, 0xc1, 0x6e, 0xa0, 0x2c, 0x54, 0x85, 0x43, 0xec, 0x69, 0x51, 0x2f, 0xc8, 0x73, 0x51, 0x4d, 0x22, 0x16, 0x16, 0x4b, 0xd3, 0x63, 0xdb, 0x60, 0x27, 0xf3, 0x79, 0xc2, 0x2c, 0x79, 0xf8, 0xd7, 0xb9, 0xda, 0xb5, 0x1a, 0x1, 0x6e, 0x3c, 0xe8, 0xd6, 0xa2, 0xff, 0xf9, 0xa9, 0x9, 0xf7, 0xc7, 0x11, 0x39, 0x85, 0xf8, 0xb5, 0xb0, 0xfd, 0xb1, 0xf0, 0x18, 0xda, 0x5a, 0xa2, 0x1a, 0x50, 0x6d, 0x3d, 0x8b, 0x93, 0x42, 0x3c, 0x6c, 0xb1, 0x9, 0x86, 0x3d, 0x35, 0x60, 0x95, 0xdb, 0x10, 0x2a, 0xb3, 0xa1, 0xc, 0x68, 0xd7, 0xd6, 0x69, 0xf6, 0x73, 0x40, 0x67, 0xd9, 0xdc, 0x1, 0xe7, 0xce, 0xe8, 0xaf, 0xfb, 0x7d, 0xfb, 0x6, 0xa0, 0xa6, 0xb8, 0xf0},
			want: []byte{0x42, 0x5a, 0x68, 0x39, 0x31, 0x41, 0x59, 0x26, 0x53, 0x59, 0xf8, 0x9a, 0xd3, 0xaf, 0x0, 0x1, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfd, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xf7, 0xfd, 0xff, 0xff, 0xc0, 0x2, 0xae, 0xeb, 0xb5, 0xdd, 0x98, 0x96, 0xed, 0xc7, 0x50, 0x32, 0xf, 0x43, 0x29, 0xa7, 0xa8, 0xda, 0x9a, 0x69, 0xed, 0x41, 0x3d, 0x4d, 0xa8, 0xd1, 0xa3, 0x4d, 0x30, 0xd4, 0x1b, 0x50, 0xf, 0xd5, 0x32, 0x6, 0x35, 0xd, 0xa0, 0x20, 0x68, 0x6d, 0x4c, 0x13, 0xd4, 0xc2, 0x7a, 0x64, 0x4f, 0xd5, 0x34, 0x1a, 0x3d, 0x4f, 0x22, 0x66, 0xa6, 0x40, 0xf5, 0x31, 0x18, 0x7a, 0x29, 0xa0, 0xd1, 0xe9, 0x19, 0xa4, 0x3d, 0x35, 0x31, 0xa9, 0xe2, 0x26, 0xd4, 0x1e, 0xa6, 0x26, 0x99, 0x33, 0x49, 0xea, 0x34, 0xf5, 0x37, 0xa6, 0xa8, 0xc2, 0x63, 0x53, 0xd4, 0x49, 0xe9, 0x33, 0x44, 0xc0, 0x4d, 0x34, 0xc9, 0xe8, 0x26, 0x9b, 0x44, 0x19, 0xd, 0xea, 0x27, 0xa2, 0x6d, 0x4c, 0x64, 0xd4, 0x69, 0xb2, 0x20, 0x34, 0xf5, 0x36, 0x89, 0x90, 0xc8, 0xd3, 0x23, 0x1a, 0x83, 0x4c, 0x7a, 0xa6, 0x13, 0x79, 0x49, 0x81, 0xa1, 0x30, 0xd3, 0x49, 0xb5, 0x30, 0x81, 0x89, 0xb2, 0x35, 0x3d, 0x32, 0x9e, 0xa6, 0x4c, 0x99, 0xf, 0x28, 0xf2, 0x26, 0x4, 0x61, 0xc, 0x4d, 0x3d, 0x21, 0x93, 0x4c, 0x65, 0x6, 0x19, 0x27, 0xa4, 0xc8, 0xd, 0x26, 0x0, 0x99, 0x18, 0xd1, 0x18, 0xd0, 0x13, 0x34, 0x2, 0x60, 0x0, 0x2, 0x63, 0x41, 0xa9, 0xa6, 0x9a, 0x7a, 0xd, 0x0, 0x8d, 0xa1, 0xa6, 0x22, 0x7a, 0x0, 0x0, 0x11, 0x80, 0x11, 0x80, 0x13, 0x34, 0x4d, 0xa9, 0x84, 0xc0, 0x0, 0x68, 0x1a, 0x9e, 0x93, 0x0, 0x6, 0x80, 0x0, 0x4c, 0x8, 0x18, 0x0, 0x3a, 0x9a, 0x7a, 0x6a, 0x33, 0x43, 0x28, 0xf4, 0x1a, 0x35, 0x3d, 0x27, 0xa3, 0x28, 0xc9, 0x81, 0xa2, 0x33, 0x51, 0x89, 0xa6, 0x34, 0x8f, 0x24, 0x7a, 0x98, 0x13, 0x0, 0xd0, 0x69, 0xa8, 0x34, 0xc1, 0xa2, 0x60, 0xd2, 0x62, 0x3d, 0x0, 0x26, 0xd3, 0x4d, 0x8, 0xd1, 0xa3, 0x9, 0xa3, 0x4f, 0x40, 0x1a, 0x13, 0x0, 0x9, 0x80, 0x9e, 0xa6, 0x23, 0x4d, 0x34, 0xc8, 0x3d, 0x4d, 0x31, 0x3d, 0x4c, 0xd0, 0x98, 0x34, 0x2, 0x2b, 0x75, 0x12, 0x6e, 0x8, 0x9, 0x70, 0x8b, 0xfd, 0x9, 0x33, 0x90, 0x4c, 0xe0, 0x53, 0xac, 0x58, 0x72, 0x7a, 0x67, 0xfb, 0x4a, 0x93, 0x8c, 0xbe, 0xd4, 0x96, 0x1f, 0xda, 0xab, 0x6b, 0xd2, 0x79, 0x0, 0xea, 0xad, 0x68, 0x95, 0xcc, 0x12, 0x83, 0xb0, 0x77, 0xee, 0x75, 0x5a, 0x38, 0x26, 0xfa, 0x6c, 0xf7, 0xf, 0xae, 0x23, 0xf8, 0xe2, 0x64, 0xdf, 0x49, 0x8c, 0x34, 0x2e, 0xdf, 0xca, 0x3, 0x27, 0x80, 0x95, 0xef, 0xf4, 0xcf, 0x1c, 0x2a, 0xb1, 0x88, 0x85, 0x82, 0x92, 0xc5, 0xfe, 0xa5, 0x49, 0x50, 0x4, 0xd2, 0x1b, 0x58, 0x77, 0x4, 0xbd, 0x20, 0x6f, 0x70, 0xe0, 0x50, 0xc6, 0x9e, 0xfd, 0xb4, 0x60, 0x97, 0xe3, 0x5, 0x9, 0x9, 0x97, 0xc6, 0xf, 0x24, 0x83, 0x17, 0xcd, 0x46, 0xd2, 0xa0, 0xa2, 0x28, 0x5a, 0x7, 0x98, 0xe8, 0xe0, 0x4a, 0xb0, 0xb1, 0xe1, 0x91, 0x48, 0xed, 0x1e, 0x8d, 0x19, 0x12, 0x17, 0x0, 0x18, 0x55, 0x39, 0xc1, 0xc0, 0x66, 0xf4, 0x1a, 0x7e, 0xb5, 0x21, 0x3, 0xf1, 0xa9, 0xba, 0x3e, 0xf5, 0x84, 0x90, 0xde, 0xd5, 0x73, 0xc6, 0xc7, 0x91, 0x4f, 0xfb, 0xfb, 0x13, 0xf, 0xcf, 0x83, 0xc3, 0xa8, 0x22, 0xae, 0xf9, 0x91, 0xb8, 0x28, 0x2c, 0x76, 0x3e, 0x22, 0xad, 0x7f, 0xfa, 0xdf, 0xa, 0xd0, 0xff, 0xc3, 0xa7, 0x48, 0x24, 0x81, 0x60, 0xfa, 0xb8, 0x16, 0x9e, 0xf0, 0x88, 0x19, 0xe5, 0xb6, 0x2b, 0x40, 0x39, 0xf8, 0xad, 0x53, 0x8, 0xff, 0x99, 0x97, 0x84, 0x14, 0xa2, 0x96, 0x2e, 0x19, 0x5d, 0x45, 0xd7, 0xfa, 0x9c, 0x51, 0xaf, 0x72, 0x70, 0x24, 0x8b, 0xb, 0x9b, 0x6f, 0xe0, 0x17, 0xa2, 0xc2, 0x93, 0xaa, 0x2a, 0x1f, 0xa5, 0x9a, 0xf8, 0x9b, 0xed, 0xb7, 0x6b, 0x41, 0x6f, 0xbe, 0x14, 0xd1, 0x74, 0xb1, 0x29, 0x37, 0xd9, 0xd1, 0x77, 0x25, 0xf4, 0xd0, 0xfd, 0xb, 0x7c, 0x1, 0xb4, 0x1d, 0x25, 0x96, 0x91, 0xd4, 0x15, 0x69, 0xfb, 0xee, 0xe3, 0xd4, 0xf, 0xb9, 0xc0, 0x91, 0x23, 0x38, 0x41, 0x93, 0x22, 0x82, 0x8, 0x2f, 0x8c, 0x3e, 0x7b, 0x99, 0x37, 0x2, 0x50, 0xd0, 0x5d, 0x78, 0x91, 0x8c, 0xdb, 0x23, 0xb1, 0xbb, 0x1e, 0xdb, 0x11, 0xe6, 0xa, 0x98, 0xa9, 0x1, 0x87, 0x27, 0x74, 0xc8, 0x19, 0x7e, 0xf4, 0x72, 0x89, 0x6a, 0xa8, 0xc7, 0xa7, 0x30, 0x5f, 0xd5, 0xd4, 0x49, 0x1b, 0x34, 0x24, 0x55, 0x21, 0x4d, 0x1d, 0xad, 0x59, 0x5c, 0x3e, 0x2d, 0xda, 0x76, 0x3a, 0x4e, 0x6d, 0xfa, 0x8d, 0xde, 0x25, 0x58, 0xf1, 0x3f, 0xc8, 0x1d, 0xe6, 0xad, 0x39, 0x9a, 0xe, 0x23, 0xaa, 0x21, 0x57, 0x43, 0x18, 0x81, 0x14, 0x88, 0xe9, 0x5c, 0x6b, 0x14, 0xd8, 0x74, 0x66, 0x81, 0x97, 0x43, 0x74, 0xc6, 0xaa, 0x6, 0xda, 0x18, 0x72, 0xd3, 0x31, 0xbc, 0x83, 0x92, 0x13, 0x60, 0x4b, 0xf8, 0x38, 0xab, 0xe8, 0x8b, 0x1, 0xde, 0x8, 0xfd, 0x80, 0xa6, 0x53, 0xed, 0x32, 0xb, 0x6b, 0x9e, 0x40, 0x6f, 0xf, 0x9a, 0xc, 0xf3, 0x18, 0xe5, 0x6d, 0x0, 0xbe, 0x94, 0x23, 0x46, 0x46, 0x21, 0x5, 0xd6, 0xb1, 0x41, 0xb0, 0x21, 0xfa, 0x1f, 0xbc, 0xd7, 0x15, 0x47, 0xa2, 0x98, 0xd9, 0x38, 0x9a, 0xca, 0xff, 0xd5, 0x6e, 0x36, 0xe0, 0xfa, 0x33, 0xbd, 0x52, 0xe0, 0x5a, 0xe2, 0x3, 0xad, 0x5d, 0x24, 0xdc, 0x44, 0x5c, 0x7c, 0x15, 0x49, 0x8a, 0x76, 0x96, 0xda, 0x80, 0xc8, 0xdc, 0xd7, 0x47, 0x4f, 0x22, 0x5e, 0x4a, 0x4, 0xf5, 0x7c, 0xca, 0x10, 0xd6, 0x90, 0x2a, 0x47, 0xbc, 0x3e, 0xb1, 0x0, 0xed, 0x2a, 0x2e, 0x94, 0x87, 0x94, 0xf2, 0x1d, 0xa7, 0xf, 0x7f, 0x98, 0xab, 0x82, 0x9b, 0x76, 0x17, 0x3d, 0xae, 0x54, 0x6c, 0x75, 0xcb, 0xe9, 0xd5, 0x85, 0x9a, 0x82, 0xc3, 0xc3, 0x12, 0x47, 0x19, 0x55, 0xe5, 0xe5, 0x8c, 0xe3, 0x21, 0xec, 0xf, 0x6b, 0xa3, 0x86, 0x1b, 0xe5, 0xde, 0x3a, 0x69, 0xdf, 0x82, 0x9c, 0x7a, 0x42, 0xc5, 0xe3, 0x37, 0xeb, 0x8a, 0x68, 0xf4, 0x7d, 0x7f, 0xcd, 0xad, 0xbf, 0xba, 0xba, 0xf5, 0x6a, 0xf8, 0x9, 0xb8, 0xfe, 0xbd, 0x2b, 0x66, 0x20, 0xa1, 0xa8, 0x6d, 0x85, 0x9, 0xda, 0x37, 0x1, 0x48, 0x20, 0x9f, 0x2a, 0x97, 0x35, 0x3c, 0x8e, 0x9a, 0xdc, 0x3a, 0x52, 0x3, 0x3c, 0x24, 0x9e, 0x14, 0x96, 0x21, 0xfa, 0x73, 0xd, 0x52, 0xc, 0x7b, 0xa5, 0xb0, 0x11, 0xb9, 0xc4, 0x63, 0xa2, 0x4e, 0xd7, 0xc2, 0x32, 0x7e, 0x42, 0x57, 0xe3, 0x48, 0xb9, 0xbc, 0xee, 0x3f, 0xf0, 0xd9, 0xca, 0x21, 0x11, 0x5a, 0xe0, 0xdc, 0x8, 0xfe, 0xc2, 0x9c, 0x41, 0x6e, 0x51, 0x80, 0x35, 0x14, 0x4d, 0x19, 0x4d, 0x30, 0x10, 0x57, 0x97, 0x36, 0x3d, 0x1d, 0x59, 0x1d, 0x89, 0x85, 0x8a, 0x6c, 0xb0, 0x5d, 0xb7, 0x8, 0x38, 0xf9, 0x79, 0x34, 0xf1, 0xfd, 0xa8, 0xce, 0x7f, 0xaa, 0x76, 0x5c, 0x70, 0xf3, 0xfc, 0x8c, 0xe6, 0x87, 0x68, 0xcb, 0x4, 0xfe, 0x1f, 0x6, 0x67, 0xb6, 0x6f, 0x8f, 0x30, 0x8e, 0x69, 0xe1, 0xbd, 0xa7, 0x59, 0x17, 0x9c, 0xa, 0x95, 0x29, 0x39, 0x28, 0x25, 0xad, 0x19, 0x7b, 0xa9, 0x54, 0x8, 0xb1, 0xd7, 0x18, 0xfb, 0x5f, 0x9, 0xeb, 0x69, 0x16, 0x0, 0x29, 0xc7, 0x93, 0x64, 0xe9, 0x86, 0xd0, 0xc7, 0x8e, 0x3d, 0xd0, 0x38, 0x21, 0xb5, 0xc6, 0x53, 0xa7, 0x5c, 0xb, 0x12, 0x17, 0x22, 0x8d, 0x86, 0xbd, 0x74, 0xa, 0x35, 0xf1, 0x83, 0x7f, 0x96, 0x1b, 0xc, 0x9b, 0x63, 0x8a, 0x99, 0xc3, 0x44, 0xf3, 0x84, 0x49, 0x4b, 0xe6, 0x22, 0xd6, 0x57, 0x98, 0xb9, 0x74, 0xaa, 0x16, 0x7, 0x16, 0x7b, 0x52, 0xe3, 0x31, 0xa1, 0x32, 0x66, 0xe3, 0x46, 0xe7, 0xd0, 0x66, 0xc0, 0xca, 0x53, 0x9e, 0x24, 0x9e, 0xcd, 0xf2, 0x4f, 0x71, 0x97, 0xc0, 0x70, 0x15, 0x84, 0x3e, 0x29, 0xe6, 0x16, 0x78, 0x89, 0x62, 0x6b, 0x14, 0xb6, 0xaa, 0x1b, 0xf0, 0xb7, 0x1d, 0xbb, 0x9b, 0xbe, 0x4c, 0x3e, 0xa7, 0x9e, 0xb9, 0x7e, 0x4, 0xa8, 0x8c, 0x61, 0x5c, 0xa9, 0x16, 0x69, 0xa5, 0xd6, 0x51, 0xf1, 0x96, 0xc6, 0x61, 0x51, 0x7, 0xbc, 0x3a, 0x68, 0xa, 0xf1, 0x81, 0x22, 0xa7, 0x85, 0xb8, 0xa0, 0x39, 0x29, 0x0, 0x2, 0x7d, 0x8a, 0x8a, 0x83, 0x1f, 0x92, 0x23, 0xb9, 0x3f, 0xd1, 0xbc, 0x6e, 0x3b, 0xc, 0x10, 0x67, 0xb5, 0xc1, 0xec, 0xe6, 0x6d, 0xb, 0x4f, 0xfa, 0x8d, 0x60, 0x88, 0x81, 0x7e, 0x11, 0xbd, 0xa7, 0x30, 0x4c, 0x7, 0x38, 0x42, 0x14, 0x12, 0x3f, 0x61, 0xa5, 0x77, 0xf3, 0x1, 0xc3, 0x90, 0x4b, 0x1a, 0xbc, 0xf1, 0x9f, 0xc3, 0x11, 0x17, 0xc0, 0x88, 0xab, 0x8, 0x7c, 0x38, 0xd5, 0x64, 0xcd, 0x33, 0x9f, 0x3a, 0x0, 0x79, 0x0, 0xc1, 0x9e, 0xf7, 0x90, 0x9d, 0x30, 0xd3, 0xda, 0x83, 0x7e, 0x32, 0xec, 0x49, 0x1, 0x40, 0x54, 0x86, 0x68, 0xa2, 0x43, 0x5d, 0xe7, 0x45, 0xa5, 0x7e, 0xae, 0x38, 0x52, 0x7d, 0x95, 0xfa, 0x19, 0xe4, 0xec, 0xa9, 0xf, 0xc8, 0xcb, 0x38, 0x15, 0x45, 0x4c, 0x5c, 0xd0, 0x86, 0x50, 0x7, 0x3, 0xa1, 0xb6, 0xba, 0xb7, 0x41, 0xa8, 0x2e, 0xe4, 0x8a, 0x70, 0xa1, 0x21, 0xf1, 0x35, 0xa7, 0x5e},
		},
	}
	for _, v := range tt {
		t.Logf("test: %s", v.msg)
		var b bytes.Buffer
		wrtr, err := NewWriter(&b)
		if err != nil {
			t.Fatalf("error creating bzip writer: %s", err)
		}
		_, err = wrtr.Write(v.data)
		if err != nil {
			t.Fatalf("error writing data: %s", err)
		}
		wrtr.Close()
		if !reflect.DeepEqual(b.Bytes(), v.want) {
			t.Logf("got: %#v", b.Bytes())
			t.Logf("want: %#v", v.want)
			t.Fatal("bzip2 output did not match")
		}
	}
}

func TestRandomCompress(t *testing.T) {
	// generate random data
	var b bytes.Buffer
	var save bytes.Buffer
	multiW := io.MultiWriter(&b, &save)
	_, err := io.CopyN(multiW, rand.Reader, bufferLen*10)
	if err != nil {
		t.Fatalf("error generating random data: %s", err)
	}
	// compress random data
	var out bytes.Buffer
	wrtr, err := NewWriter(&out)
	if err != nil {
		t.Fatalf("error creating bzip writer: %s", err)
	}
	_, err = io.Copy(wrtr, &b)
	if err != nil {
		t.Fatalf("error compressing data: %s", err)
	}
	wrtr.Close()
	// use the built in bzip2 to read the data back out
	var decompress bytes.Buffer
	bzipOut := bzip2.NewReader(&out)

	_, err = io.Copy(&decompress, bzipOut)
	if err != nil {
		t.Fatalf("error decompressing data with builtin bzip2: %s", err)
	}
	if !reflect.DeepEqual(save.Bytes(), decompress.Bytes()) {
		t.Fatal("data passed through cbzip2 did not match after decompression")
	}
}
